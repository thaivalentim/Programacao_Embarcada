/* USER CODE BEGIN Header */ //CÓDIGO FUNCIONAL
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "st7735\st7735.h"
#include "stdint.h"
#include <time.h>
#include <stdlib.h>

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define btnEsquerda HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11)
#define btnDireita HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9)
#define btnCimaBaixo HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12)
#define btnConfirma HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10)

#define TOTAL_CARTAS 16
#define LINHAS 2
#define COLUNAS 8
#define MOVIMENTO_DELAY 200

#define X 4
#define Y 20
#define largura 14
#define altura 14
#define espaco 6

typedef struct {
	char simbolo;
    char letra;
    uint16_t cor;
    uint8_t revelada; // 0 = escondida e 1 = revelada
} Cartinha;

Cartinha cartas[TOTAL_CARTAS];

int indexCarta1 = -1;
int indexCarta2 = -1;
int cartasReveladas = 0;
int tentativas = 0;
int pares = TOTAL_CARTAS; // 16 cartas = 8 pares; efetua a operação (pares - 2) a cada acerto, ou seja, decrementa 2 na variável.
int recordeTentativas = 0;

uint32_t tempoInicio;

//modo multiplayer
int modoMultiplayer = 0;
int jogadorAtual = 1;
int tentativasP1 = 0;
int tentativasP2 = 0;
int tentativasTotais = 0;
int acertosJogador1 = 0;
int acertosJogador2 = 0;

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
 Menu(void);
 IniciarJogo(void);
 GerarParesAleatorios(void);
 NavegarCursor(void);
 DesenharCirculo(int x, int y, int raio, uint16_t cor);
 SelecaoDeCarta(int linha, int coluna);
 AtualizarTentativas(void);
 CompararPares(void);
 VerificarFimDeJogo(void);
 ExibirFimDeJogo(void);
 Vitoria(void);
 AtualizarIndicadorJogador(void);
 ExibirTrocaDeTurno(void);

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
SPI_HandleTypeDef hspi1;

/* USER CODE BEGIN PV */
#define GALINHAPULO_HEIGHT 60
#define GALINHAPULO_WIDTH 60

static const uint16_t galinhapulo[]  = {
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x9ef7, 0x1ce7, 0x1ce7, 0x5def, 0xbef7, 0x5def, 0x1ce7, 0x3ce7, 0xbef7, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xbef7, 0xf7bd, 0x2d6b, 0x2d6b, 0x518c, 0x9ad6, 0xd39c, 0x2d6b, 0xf083, 0x9ad6, 0xdfff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xf7bd, 0x4d7b, 0x0369, 0x0369, 0xe771, 0xcf8b, 0x4972, 0xe368, 0xa671, 0xef8b, 0xbad6, 0xdfff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x4d6b, 0xe348, 0x43d9, 0x63e1, 0x43b9, 0x0361, 0x2399, 0x43e1, 0x43c9, 0x0369, 0x1094, 0x79d6, 0xbef7, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x4d6b, 0xc340, 0x02c1, 0x43d9, 0x63d1, 0x43b9, 0x03b9, 0x23d1, 0x43d1, 0x43b9, 0xe769, 0xcf7b, 0x5def, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x4d6b, 0xc328, 0xc368, 0x02b1, 0x23d1, 0x43d9, 0x03c9, 0xe2c0, 0x23c9, 0x43d9, 0x0361, 0xcb5a, 0x3ce7, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x75ad, 0x0c63, 0x2531, 0x4cb3, 0x0edc, 0x2fec, 0x0ee4, 0xa9ca, 0x23c1, 0x03c9, 0xe358, 0xab5a, 0x3ce7, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x79ce, 0x718c, 0x8a52, 0xf6cd, 0x3af7, 0x3aff, 0x3aff, 0x12e5, 0x89ca, 0x48ca, 0x287a, 0x4d6b, 0xf7bd, 0x9ef7, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xaf73, 0x0c63, 0xb8de, 0x7bf7, 0xdcff, 0xdcff, 0xdcff, 0x5bff, 0xb8f6, 0x98f6, 0x15de, 0xb0a4, 0x494a, 0x9ad6, 0xdfff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x9ef7, 0x8e73, 0x508c, 0xb5b5, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0x7bff, 0x74b5, 0x6529, 0x59ce, 0xdfff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xbef7, 0xd7bd, 0x75ad, 0x75ad, 0x76ad, 0x9ad6, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x7def, 0x4521, 0x74b5, 0x9cff, 0xdcff, 0xdcff, 0x3aef, 0xd6bd, 0xb9de, 0xdcff, 0xdcff, 0xdcff, 0xbcff, 0xb5bd, 0x6629, 0x59ce, 0xdfff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x3ce7, 0xe839, 0xc318, 0xc418, 0xe418, 0x1084, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x7def, 0x0421, 0x95b5, 0xddff, 0xdcff, 0xdcff, 0x16c6, 0x494a, 0xd29c, 0xdcff, 0xdcff, 0xddff, 0xddff, 0xb5bd, 0x6629, 0x59ce, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x718c, 0xc739, 0x78ce, 0x7bf7, 0x7bf7, 0x5bef, 0x508c, 0x8a52, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x14a5, 0xc739, 0x3bef, 0xbcff, 0xdcff, 0xdcff, 0xddff, 0x16c6, 0x494a, 0xd29c, 0xbcff, 0x59ff, 0xaafd, 0xc3fc, 0xc2f4, 0x82ec, 0xc449, 0x2421, 0x2842, 0xdfff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xdfff, 0x718c, 0xe839, 0xb9de, 0xdcff, 0xdcff, 0xbcff, 0x508c, 0x6a4a, 0xdfff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xdfff, 0xf39c, 0x8631, 0x9cf7, 0xdcff, 0xdcff, 0xdcff, 0xddff, 0xfae6, 0x33ad, 0x78ce, 0x37ff, 0x2efe, 0x25fd, 0xc2fc, 0xc2fc, 0xc2fc, 0x229b, 0xc282, 0x0483, 0x9294, 0xfbde, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xdfff, 0xf7bd, 0xef7b, 0x8d73, 0x1ae7, 0xdcff, 0xdcff, 0xbcff, 0x74ad, 0x8e73, 0xd7bd, 0x5def, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x38c6, 0x518c, 0x4d6b, 0x9cf7, 0xdcff, 0xdcff, 0xdcff, 0xddff, 0xdcff, 0xdcff, 0xdcff, 0x52fe, 0x84fc, 0x42fc, 0x42fc, 0x42fc, 0x42fc, 0x02cc, 0xe2c3, 0xa3b3, 0xab52, 0x79ce, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x9ef7, 0x2d63, 0xee7b, 0xf9e6, 0xbcff, 0xdcff, 0xdcff, 0xdcff, 0xbcff, 0x98d6, 0x8a52, 0xd7bd, 0x7def, 0xffff, 0xffff, 0xffff, 0xbef7, 0x1ce7, 0x0c63, 0xef7b, 0x7bf7, 0xdcff, 0xdcff, 0xdcff, 0xddff, 0xddff, 0xddff, 0xdcff, 0xdcff, 0xf3fd, 0x66f3, 0x62ea, 0x21ea, 0x41e2, 0x61d2, 0xc649, 0xa731, 0xaa52, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xbef7, 0x2d63, 0x8c7b, 0x35de, 0x9cff, 0xdcff, 0xdcff, 0xdcff, 0xbcff, 0x5bef, 0x33a5, 0xef7b, 0x96b5, 0xbef7, 0xbef7, 0xbef7, 0xbad6, 0xcf7b, 0x9194, 0x57ce, 0xbcff, 0xdcff, 0xdcff, 0xddff, 0xddff, 0xddff, 0xddff, 0xddff, 0xddff, 0xf9fe, 0x51ed, 0x66d2, 0x42c9, 0x42a1, 0x2351, 0x9294, 0x96b5, 0x18c6, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x9ef7, 0x2d63, 0x6c7b, 0x14d6, 0x9bff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0x1ae7, 0xb194, 0x518c, 0xf39c, 0xf39c, 0xf39c, 0x9294, 0xcf7b, 0x78ce, 0xbcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xddff, 0x78f6, 0x4fdc, 0x06d2, 0x02c9, 0x0399, 0xc328, 0x1084, 0x79ce, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xbef7, 0x9294, 0xcd7b, 0xf1ac, 0xf9ee, 0x9bff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0x5bf7, 0x33a5, 0xcb5a, 0xcb5a, 0xca5a, 0x8d73, 0xb8d6, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xf2e4, 0x64c1, 0x43d9, 0x63e1, 0x43b9, 0xe358, 0xc320, 0x518c, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xdfff, 0x1ce7, 0x518c, 0xca5a, 0xf4d5, 0x3af7, 0xbcff, 0x7bf7, 0x9cf7, 0x9cff, 0xdcff, 0xbcff, 0x1ae7, 0x98d6, 0x98d6, 0x98d6, 0xb9de, 0x7bf7, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xf2e4, 0x64c1, 0x43d9, 0x63e1, 0x43c9, 0xe2a8, 0xc330, 0x518c, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x718c, 0x0842, 0x92cd, 0x19f7, 0x7bf7, 0x8d73, 0xae73, 0x33a5, 0xdcff, 0xddff, 0xddff, 0xdcff, 0xdcff, 0xddff, 0xdcff, 0xdcff, 0xddff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xddff, 0xdcff, 0xdcff, 0xf2e4, 0x64c1, 0x43d9, 0x43a1, 0x0792, 0xcccb, 0x4531, 0x518c, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xbef7, 0xd7bd, 0xef83, 0xad7b, 0x56de, 0x7af7, 0x3bef, 0xe418, 0xcb5a, 0x33ad, 0xdcff, 0xdcff, 0xddff, 0xddff, 0xddff, 0xddff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0x19ef, 0x3af7, 0xdcff, 0xdcff, 0xddff, 0xdcff, 0xdcff, 0x16ee, 0x8dcb, 0xe699, 0x687a, 0x2e9c, 0x34de, 0xa631, 0x518c, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x9ef7, 0x8e73, 0x8c7b, 0x93c5, 0x5af7, 0xbcff, 0x3bef, 0xe418, 0xd19c, 0x1aef, 0xdcff, 0xdcff, 0xddff, 0xddff, 0xddff, 0xddff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0x93c5, 0x15ce, 0xdcff, 0xdcff, 0xdcff, 0xddff, 0xddff, 0x7bff, 0x78e6, 0x6d7b, 0x4f9c, 0x14d6, 0x75e6, 0x8952, 0x3084, 0xdbde, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x7def, 0x0c63, 0x6c7b, 0x14d6, 0x9bff, 0xddff, 0x3bef, 0xe418, 0x90a4, 0xd7ee, 0xdcff, 0xddff, 0xddff, 0xddff, 0xddff, 0xddff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xaa5a, 0xce7b, 0xdcff, 0xdcff, 0xdcff, 0xddff, 0xddff, 0xddff, 0x9cff, 0xf9e6, 0x1aef, 0x39f7, 0x96e6, 0x92c5, 0xcd83, 0xeb5a, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x7def, 0x0c63, 0x6c7b, 0xf4d5, 0xb7ee, 0x5af7, 0x9cf7, 0x13a5, 0x6c73, 0x8c7b, 0xf8ee, 0x7bff, 0xddff, 0xddff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0x7bf7, 0xd8ee, 0xc739, 0x4c6b, 0xdcff, 0xdcff, 0xdcff, 0xddff, 0xddff, 0xddff, 0xdcff, 0xdcff, 0xdcff, 0x5af7, 0x76e6, 0x55e6, 0xac7b, 0xc739, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x9ef7, 0x718c, 0xad7b, 0xf0ac, 0x34de, 0x39f7, 0xbcff, 0x7bf7, 0x2c63, 0x0742, 0x55e6, 0x19ef, 0x9bff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0x7bf7, 0x97de, 0xb0a4, 0xeb5a, 0x9194, 0xdcff, 0xdcff, 0xdcff, 0xddff, 0xddff, 0xddff, 0xdcff, 0xdcff, 0xdcff, 0x5af7, 0x76e6, 0x55e6, 0xad83, 0xc739, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xdfff, 0x518c, 0x284a, 0xb3cd, 0x19f7, 0xbcff, 0xbcf7, 0x2c63, 0x0742, 0x34e6, 0x55e6, 0xf8ee, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xb7ee, 0xd0ac, 0x0421, 0xf6c5, 0xbcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xddff, 0xddff, 0xdcff, 0xdcff, 0x5af7, 0x75e6, 0x55e6, 0xac83, 0xc739, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x518c, 0x0842, 0x93cd, 0x55e6, 0x55e6, 0xbcff, 0x5bf7, 0xf6bd, 0x0742, 0xd0ac, 0x34de, 0x55e6, 0x55e6, 0x55e6, 0x55e6, 0x55e6, 0x34de, 0xca62, 0x6952, 0x92cd, 0x3af7, 0xdcff, 0xddff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xbcff, 0x5af7, 0x75e6, 0x55e6, 0xac83, 0xe839, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x518c, 0x0842, 0x92cd, 0x55e6, 0x34e6, 0xddff, 0xdcff, 0xfae6, 0x0f84, 0xad7b, 0x8fa4, 0x55e6, 0x54e6, 0x54e6, 0x54e6, 0x11b5, 0xcd83, 0x8c7b, 0x6f9c, 0xd8ee, 0x9cff, 0xdcff, 0xdcff, 0xddff, 0xddff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0x5af7, 0xd8ee, 0x55e6, 0x0e8c, 0xce83, 0xb294, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xf39c, 0xeb5a, 0xf1b4, 0xf4d5, 0x34e6, 0x9bff, 0x9cff, 0xdcff, 0xf9e6, 0x6d6b, 0x2b6b, 0x72c5, 0x72c5, 0x72c5, 0x72c5, 0xcd83, 0x0742, 0xf1ac, 0xb7e6, 0xbcff, 0xddff, 0xdcff, 0xdcff, 0xddff, 0xddff, 0xdcff, 0xdcff, 0xdcff, 0xbcff, 0x9bff, 0xd7ee, 0x55e6, 0x54e6, 0xa631, 0x3184, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xdbde, 0xc739, 0xed8b, 0x34e6, 0x34e6, 0xd7ee, 0x9cff, 0x9cff, 0x9cf7, 0x74b5, 0xa739, 0xa731, 0xa631, 0xa631, 0x8c7b, 0xf4d5, 0x5af7, 0xbcff, 0xddff, 0xddff, 0xddff, 0xddff, 0xddff, 0xddff, 0xbcff, 0xbcff, 0x9bff, 0x7bf7, 0xb6ee, 0x55e6, 0x34de, 0xb3cd, 0x284a, 0x9294, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xdbde, 0xc739, 0xed8b, 0x34e6, 0x54e6, 0x76e6, 0xd7ee, 0xf8ee, 0x9bff, 0xd9de, 0x33a5, 0x33ad, 0x33a5, 0x33ad, 0x16c6, 0x19ef, 0x9bff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xbcff, 0xdcff, 0xbcff, 0xbcff, 0x39f7, 0xd7ee, 0xb7ee, 0x75e6, 0x54e6, 0x31bd, 0x0b6b, 0xf39c, 0x9ad6, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x3ce7, 0xf07b, 0xce83, 0x6f9c, 0x54e6, 0x34e6, 0x34e6, 0x76e6, 0x5af7, 0xddff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xddff, 0xddff, 0xddff, 0x9cff, 0x39f7, 0x39f7, 0x39f7, 0x39f7, 0x39f7, 0x39f7, 0x19f7, 0xb7ee, 0x55e6, 0x55e6, 0x55e6, 0x11b5, 0xee83, 0x6d6b, 0x3ce7, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xdfff, 0xb294, 0x8a52, 0x11b5, 0xd3d5, 0x34e6, 0x35de, 0x16ce, 0xb9de, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xddff, 0x7bff, 0x19ef, 0x54e6, 0x54e6, 0x54e6, 0x54e6, 0x54e6, 0x54e6, 0x54e6, 0x55e6, 0x55e6, 0x34de, 0x72c5, 0x4c73, 0xcf7b, 0x5def, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xfbde, 0x18c6, 0x274a, 0xd0ac, 0x14de, 0x92c5, 0x4c73, 0x7194, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xf8ee, 0x96e6, 0x55e6, 0x55e6, 0x55e6, 0x55e6, 0x55e6, 0x55e6, 0x55e6, 0x55e6, 0x55e6, 0xd3d5, 0x6c73, 0x308c, 0x59ce, 0xbef7, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xdfff, 0xd39c, 0x8d7b, 0xea6a, 0xa95a, 0x6631, 0x8d73, 0xddff, 0xddff, 0xddff, 0xdcff, 0xdcff, 0xdcff, 0x909c, 0x2e94, 0x34e6, 0x55e6, 0x55e6, 0x55e6, 0x55e6, 0x55e6, 0xf3d5, 0x4e9c, 0x2b6b, 0x6c73, 0x9194, 0x9ad6, 0xbef7, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xdfff, 0x14a5, 0x8e73, 0x2d63, 0xa731, 0x6952, 0xd6bd, 0x5bef, 0xdcff, 0xdcff, 0xb9de, 0x13a5, 0x8d7b, 0xed8b, 0x34e6, 0x55e6, 0x55e6, 0x14de, 0x6f9c, 0xed8b, 0x8c7b, 0xe741, 0xc739, 0xcf7b, 0xbad6, 0x18c6, 0xf39c, 0xd39c, 0x3ce7, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x5def, 0x1ce7, 0x59ce, 0x4d6b, 0x8631, 0x4d6b, 0x98de, 0x7bf7, 0x1ae7, 0xf3a4, 0x2842, 0xcd83, 0x11b5, 0x92c5, 0x92c5, 0x92c5, 0x11b5, 0x284a, 0x6531, 0x6531, 0x0429, 0x2c63, 0x59ce, 0x1ce7, 0xee83, 0xe741, 0x8631, 0x79ce, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xbff7, 0x9ad6, 0xaf73, 0x6952, 0x52bd, 0x35de, 0x8d7b, 0xa731, 0x0421, 0x8631, 0xc741, 0xe739, 0xc739, 0xc741, 0xa639, 0x0421, 0x4341, 0x429a, 0xa361, 0x6e6b, 0x59ce, 0xcf7b, 0x058b, 0xe392, 0x2329, 0x59ce, 0xdfff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xdfff, 0xfbde, 0x6e6b, 0x4d6b, 0x887a, 0x248a, 0x886a, 0xa962, 0x508c, 0x35a5, 0x35a5, 0x35a5, 0x34a5, 0x35a5, 0x34a5, 0x35a5, 0x35a5, 0x35a5, 0x5094, 0x2572, 0xe289, 0x668a, 0xca72, 0x458a, 0x0272, 0xe872, 0xf39c, 0x5def, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xdfff, 0x59ce, 0x0421, 0x8441, 0x037a, 0x2392, 0x0752, 0x0842, 0xb6b5, 0xbef7, 0xbef7, 0xbef7, 0xbeff, 0xbef7, 0xbef7, 0xbef7, 0xbef7, 0xbef7, 0x79ce, 0x0b73, 0x84aa, 0x42b2, 0xa369, 0x029a, 0x667a, 0xef83, 0x3ce7, 0xdfff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x59ce, 0x4339, 0x62b3, 0xe292, 0xab5a, 0x79ce, 0xbef7, 0xdfff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xdfff, 0x3bf7, 0xacf4, 0xc1f2, 0x61ca, 0x4351, 0xd39c, 0x9eef, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xdfff, 0x728c, 0x8631, 0x6339, 0x82b3, 0xe292, 0xab52, 0x9ad6, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x7ace, 0xca62, 0x64a2, 0x22aa, 0xe659, 0xf3a4, 0x5def, 0xdfff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xdfff, 0x96b5, 0x0c63, 0x6339, 0x82b3, 0x0293, 0xab52, 0x9ad6, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xdbde, 0xef83, 0x877a, 0x8782, 0x108c, 0xbad6, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xdfff, 0x18c6, 0x6331, 0x429b, 0x0493, 0x6e6b, 0xbbd6, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x3ce7, 0x3184, 0x3184, 0x5def, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xdfff, 0x38c6, 0x8631, 0xe641, 0xee83, 0x1ce7, 0xbef7, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xdfff, 0x7def, 0x7def, 0xdfff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xdfff, 0x1ce7, 0xd39c, 0xd39c, 0x18c6, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xdfff, 0x3ce7, 0x79ce, 0x79ce, 0x79ce, 0x79ce, 0x79ce, 0x79ce, 0x79ce, 0x79ce, 0x79ce, 0x59ce, 0x79ce, 0x79ce, 0x79ce, 0x79ce, 0x79ce, 0x79ce, 0xfbde, 0xbef7, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xdfff, 0x7def, 0x3ce7, 0x55ad, 0xab52, 0xab52, 0xab52, 0xab52, 0xab52, 0xab52, 0xab52, 0xab52, 0xab52, 0xab52, 0xab52, 0xab52, 0xab52, 0xab52, 0xab52, 0xab52, 0x718c, 0xfbde, 0x7def, 0xbef7, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xfbde, 0x8e73, 0x6e6b, 0x6a4a, 0xe418, 0xe418, 0xe418, 0xe418, 0xe418, 0xe418, 0xe418, 0xe418, 0xe418, 0xe418, 0xe418, 0xe418, 0xe418, 0xe418, 0xe418, 0xe418, 0xe839, 0x2d63, 0x8e73, 0x38c6, 0xdfff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xdfff, 0xfbde, 0x6d6b, 0x6e6b, 0x6e6b, 0x6e6b, 0x6e6b, 0x6e6b, 0x6e6b, 0x6e6b, 0x6e6b, 0x6d6b, 0x6e6b, 0x6e6b, 0x6d6b, 0x6e6b, 0x6e6b, 0x6e6b, 0x6e6b, 0x6d6b, 0x6d6b, 0x6d6b, 0x4d6b, 0x4d6b, 0x18c6, 0xdfff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xbef7, 0xfbde, 0xfbde, 0xfbde, 0xfbde, 0xfbde, 0xfbde, 0xfbde, 0xfbde, 0xfbde, 0xfbde, 0xfbde, 0xfbde, 0xfbde, 0xfbde, 0xfbde, 0xfbde, 0xfbde, 0xfbde, 0xfbde, 0xfbde, 0xfbde, 0xfbde, 0x9ef7, 0xdfff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff
};

#define GALINHACHAO_HEIGHT 60
#define GALINHACHAO_WIDTH 60

static const uint16_t galinhachao[]  = {
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xfbde, 0x18c6, 0x38c6, 0xdbde, 0x7def, 0x39c6, 0x18c6, 0x18c6, 0x1ce7, 0xdfff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x728c, 0x6629, 0xa649, 0xae83, 0x75b5, 0x085a, 0x6549, 0x6549, 0x3194, 0xfbde, 0xbef7, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x3184, 0xe420, 0x4491, 0xe781, 0xaa72, 0x6499, 0x23a1, 0x23a1, 0x287a, 0x9294, 0x3ce7, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x3184, 0xe428, 0x43c9, 0x43b1, 0x0389, 0x23c1, 0x23d1, 0x43d9, 0x23a1, 0x287a, 0x108c, 0xfbde, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x3184, 0xe428, 0x23a9, 0x43c1, 0x23c9, 0xe3c0, 0x03c1, 0x23d1, 0x43d9, 0x2499, 0x0439, 0xf7bd, 0xdfff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x3184, 0xe418, 0x0449, 0x0389, 0x03c9, 0xe3c0, 0xe2c0, 0x03c9, 0x23d9, 0x23a1, 0xe438, 0xf7bd, 0xdfff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x79ce, 0xb394, 0x0421, 0xcb7a, 0x12e5, 0x12e5, 0x0edc, 0xc6c1, 0x03c9, 0x0399, 0xe430, 0xf7bd, 0xdfff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x9ad6, 0x14a5, 0x4d6b, 0x33ad, 0x9cff, 0x9cff, 0x78f6, 0x2fdc, 0x2bd3, 0x0bb3, 0xca72, 0xb29c, 0x59ce, 0xdfff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x9294, 0x0842, 0x3aef, 0x7bf7, 0xdcff, 0xdcff, 0x9cff, 0x3aff, 0x1af7, 0xb7ee, 0x14d6, 0xca5a, 0xcf7b, 0x9ef7, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x6a4a, 0x508c, 0x98d6, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xbcff, 0x9bff, 0xaa52, 0x6e6b, 0x9ef7, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x8629, 0x718c, 0xbcff, 0xdcff, 0xdcff, 0xdcff, 0x9cf7, 0x1aef, 0x7bf7, 0xdcff, 0xbcff, 0xbcff, 0xcb5a, 0x6e6b, 0x9eef, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xdfff, 0xbef7, 0xbef7, 0xbef7, 0xbef7, 0xbeff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xdfff, 0xbef7, 0xa731, 0x9194, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xd6bd, 0xaa52, 0x54ad, 0xdcff, 0xdcff, 0xdcff, 0xca5a, 0x6d6b, 0x5def, 0xbef7, 0xdfff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x3ce7, 0x6e6b, 0x0842, 0x2942, 0x2942, 0x2942, 0x4d6b, 0xbef7, 0xdfff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x18c6, 0x4a4a, 0x17c6, 0x3aef, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xf6bd, 0xcb5a, 0x74b5, 0xdcff, 0xbcff, 0xbcff, 0xc8dc, 0x249b, 0x284a, 0x0842, 0x518c, 0xbef7, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x1ce7, 0x8a52, 0x2942, 0x8e73, 0xce7b, 0xae7b, 0xef83, 0x14a5, 0x3cef, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xb6b5, 0x4629, 0x1ae7, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0x98d6, 0x9194, 0x37ce, 0xdcff, 0x38ff, 0x93fe, 0xe6fc, 0xa2c3, 0x837a, 0x637a, 0x4983, 0x34a5, 0x9ef7, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x7def, 0x38c6, 0x2c63, 0xb29c, 0x7bf7, 0xdcff, 0xdcff, 0x37ce, 0x6629, 0x79ce, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x1ce7, 0x14a5, 0x694a, 0x3aef, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0x39ff, 0xcff5, 0x64f4, 0x22f4, 0x02e4, 0xc2d3, 0xc2d3, 0x0593, 0xab52, 0x3de7, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xb6b5, 0x2c63, 0x54ad, 0x1ae7, 0xbcff, 0xdcff, 0xdcff, 0x78ce, 0xe839, 0xf8bd, 0x9ef7, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x1084, 0x2c63, 0x37ce, 0xbcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0x0fed, 0xe4e2, 0xc2e2, 0xa1d2, 0x2292, 0x8441, 0x2652, 0xee83, 0xdbde, 0xdfff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x75ad, 0x8a52, 0x16c6, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0x1ae7, 0xb194, 0x1084, 0x96b5, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x8e6b, 0xcb5a, 0x5bef, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0x2de4, 0x62c9, 0x82c9, 0x8281, 0x4349, 0xe418, 0xb294, 0x38c6, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x75ad, 0x8a52, 0xb4bd, 0x7bff, 0xbcff, 0xdcff, 0xdcff, 0xdcff, 0x5bf7, 0x0f84, 0x1084, 0xf8bd, 0x7def, 0xffff, 0xffff, 0xffff, 0x7def, 0xf8bd, 0xcf7b, 0x508c, 0x7bf7, 0xbcff, 0xdcff, 0xdcff, 0xdcff, 0xbcff, 0xbcff, 0xdcff, 0xdcff, 0xdcff, 0xced3, 0xe2c0, 0x03c9, 0xc340, 0xc418, 0xe418, 0x3ce7, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x75ad, 0x8a52, 0x31b5, 0x18f7, 0xbcff, 0xdcff, 0xdcff, 0xdcff, 0xbcff, 0xd9de, 0xf29c, 0x2d63, 0x18c6, 0x1ce7, 0x1ce7, 0x1bdf, 0x38c6, 0x2c63, 0xd29c, 0xf9e6, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xdcff, 0xbcff, 0xbcff, 0xdcff, 0xdcff, 0xdcff, 0xced3, 0x03c9, 0x43d9, 0xe358, 0xc320, 0xc418, 0x3ce7, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x75ad, 0x8a52, 0x11b5, 0xf8ee, 0xbcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xbcff, 0xb9de, 0xd29c, 0x8e73, 0x2d63, 0x2d63, 0x2d63, 0x8e73, 0xd29c, 0xb8de, 0xbcff, 0xdcff, 0xdcff, 0xbcff, 0xbcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xcedb, 0x03c9, 0x43e1, 0x0399, 0xe358, 0xc418, 0x3ce7, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xbad6, 0xd39c, 0xce83, 0x94bd, 0x7bf7, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xbcff, 0xfae6, 0xd29c, 0x2f84, 0x2f84, 0x2f84, 0xd29c, 0xfae6, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xcedb, 0x03c9, 0x43e1, 0xa8d2, 0x2782, 0xe420, 0x3ce7, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xdfff, 0xdbde, 0xcb5a, 0x508c, 0x5bef, 0xdcff, 0x1ae7, 0xb9de, 0xdcff, 0xdcff, 0xbcff, 0xbcff, 0x5bef, 0x3aef, 0x3aef, 0x3aef, 0x5bef, 0xbcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xbcff, 0xbcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0x70dc, 0xc6c1, 0x64b9, 0x8ed4, 0x2e9c, 0x0742, 0x38c6, 0x3ce7, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x1ce7, 0x8a52, 0x3084, 0x5bef, 0xdcff, 0x508c, 0x2c63, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xbcff, 0xbcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0x1af7, 0xb1b4, 0xc651, 0xd0b4, 0xf3d5, 0x72c5, 0x494a, 0x518c, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x38c6, 0xef7b, 0x2f94, 0x15ce, 0x9bf7, 0xdcff, 0x8d73, 0x0842, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xbcff, 0xbcff, 0xdcff, 0x54ad, 0x8d73, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0x1ae7, 0xd5bd, 0xd8e6, 0xf8ee, 0x75e6, 0x4529, 0x8e73, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x75ad, 0x8a52, 0xf0b4, 0xf8ee, 0xbcff, 0xdcff, 0x8d73, 0x0842, 0x7af7, 0xbcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xbcff, 0xbcff, 0xdcff, 0x3084, 0xa631, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xbcff, 0xbcff, 0xbcff, 0x39f7, 0x75e6, 0x4529, 0x8e73, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x75ad, 0x6a52, 0x10b5, 0xf8ee, 0xbcff, 0xdcff, 0x8d73, 0x0842, 0x95e6, 0x5af7, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xbcff, 0xbcff, 0xdcff, 0xdcff, 0xdcff, 0x3084, 0x8629, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0x39f7, 0x75e6, 0x4529, 0x8e73, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x75ad, 0x8a52, 0x11b5, 0xf8ee, 0x9cff, 0xbcff, 0xfae6, 0x74ad, 0xe741, 0x73c5, 0x18ef, 0xbcff, 0xbcff, 0xdcff, 0xbcff, 0xbcff, 0xdcff, 0xdcff, 0xdcff, 0xbcff, 0xbcff, 0x55e6, 0x8c7b, 0x8631, 0xdcff, 0xdcff, 0xdcff, 0xbcff, 0xbcff, 0xdcff, 0xbcff, 0xbcff, 0xdcff, 0xbcff, 0x39f7, 0x75e6, 0x6529, 0x8e73, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x59ce, 0x318c, 0xee83, 0x73bd, 0xf8ee, 0xbcff, 0xbcff, 0x37ce, 0x4529, 0x51bd, 0xb6ee, 0x39f7, 0x9bff, 0xdcff, 0xbcff, 0xbcff, 0xdcff, 0xdcff, 0xdcff, 0x9bff, 0x39f7, 0xcd83, 0xce7b, 0x308c, 0xdcff, 0xdcff, 0xdcff, 0xbcff, 0xbcff, 0xdcff, 0xbcff, 0xbcff, 0xdcff, 0x3af7, 0xd7ee, 0x75e6, 0x6529, 0x8e73, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x1ce7, 0xab52, 0x8c7b, 0x14de, 0x9cff, 0xdcff, 0x78d6, 0x2842, 0xd0ac, 0xf3d5, 0x96ee, 0x5af7, 0x9bff, 0x9bff, 0x9bff, 0x9bff, 0x9bff, 0x9bff, 0xd8e6, 0xb3cd, 0xe739, 0xd29c, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xbcff, 0xbcff, 0xdcff, 0xdcff, 0xb6ee, 0x54e6, 0x54e6, 0x4529, 0x8e73, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x1ce7, 0x8b52, 0x8c7b, 0x14de, 0x7bff, 0xbcff, 0x9cf7, 0x77d6, 0x2c63, 0xad7b, 0xf3d5, 0x75e6, 0x95e6, 0x95e6, 0x95e6, 0x95e6, 0x95e6, 0x34de, 0x4f94, 0x2842, 0x57ce, 0x5bef, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xbcff, 0xbcff, 0xbcff, 0x9cff, 0xb6ee, 0x34de, 0xd3d5, 0xe839, 0x1084, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x1ce7, 0x8a52, 0x8c7b, 0x14de, 0xd7ee, 0x7af7, 0xbcff, 0x9bf7, 0x54ad, 0x2f8c, 0xcd83, 0xd3cd, 0x75e6, 0x75e6, 0x75e6, 0x75e6, 0x75e6, 0x2e94, 0xad7b, 0x9194, 0x7bf7, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0x7bf7, 0xf8f6, 0x75e6, 0x11b5, 0x4b73, 0xf39c, 0x38c6, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x5def, 0x728c, 0xce83, 0x6f9c, 0x34de, 0x39f7, 0xbcff, 0xdcff, 0x9cff, 0x16c6, 0x8d73, 0x4e94, 0x8f9c, 0x8f9c, 0x8f9c, 0x8f9c, 0x8fa4, 0x8d73, 0xd29c, 0x7bf7, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0x7bff, 0xf8ee, 0x95e6, 0x75e6, 0x2e94, 0x2521, 0x3ce7, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xdfff, 0x718c, 0x8731, 0xd3d5, 0x18ef, 0x7bff, 0xdcff, 0xbcff, 0xbcff, 0x78d6, 0x6d6b, 0x694a, 0x694a, 0x694a, 0x694a, 0x6a4a, 0x16c6, 0x9cf7, 0xbcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xbcff, 0x9bff, 0x7bff, 0xd7ee, 0x75e6, 0x75e6, 0xb2cd, 0xee8b, 0x494a, 0x5def, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x728c, 0xa731, 0xd3cd, 0x96e6, 0xd7ee, 0xdcff, 0xdcff, 0xdcff, 0x5bef, 0x37ce, 0xd5bd, 0xd5bd, 0xd5bd, 0xd5bd, 0xd5bd, 0x3aef, 0xbcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0x7bf7, 0xd7ee, 0xd7ee, 0x95ee, 0x75e6, 0x75e6, 0x6c7b, 0x8e73, 0xb6b5, 0xbef7, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x79ce, 0xb394, 0x6c73, 0x11b5, 0x75e6, 0xf8ee, 0xf8ee, 0x5af7, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xf8ee, 0xf8ee, 0xf8ee, 0xf8ee, 0xf8ee, 0xf8ee, 0xd7ee, 0x75e6, 0x74e6, 0x74e6, 0x72c5, 0xcd83, 0x518c, 0xf7bd, 0xbef7, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x5def, 0x8e6b, 0xee83, 0xf0ac, 0x74e6, 0x75e6, 0xb7ee, 0x7af7, 0xbcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0x9cff, 0x5af7, 0x54e6, 0x54e6, 0x74e6, 0x54e6, 0x54e6, 0x54e6, 0x54e6, 0x74e6, 0x75e6, 0x72c5, 0x0e8c, 0x4c6b, 0x9ace, 0xdfff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xdfff, 0xfbde, 0xae73, 0x6952, 0x75e6, 0x75e6, 0x75e6, 0xd7ee, 0x9bff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xbcff, 0x5af7, 0xb6ee, 0x54e6, 0x74e6, 0x74e6, 0x74e6, 0x74e6, 0x74e6, 0x74e6, 0x75e6, 0x75e6, 0xad83, 0x0c63, 0xf7bd, 0x9ef7, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xfbde, 0x96b5, 0x284a, 0x484a, 0xed8b, 0xb6ee, 0x7bff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xdcff, 0xf8ee, 0x96ee, 0x74e6, 0x74e6, 0x74e6, 0x74e6, 0x75e6, 0x75e6, 0x74e6, 0x31bd, 0xca5a, 0x284a, 0x7194, 0xbad6, 0x9ef7, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x3ce7, 0xcf73, 0xcf7b, 0xef7b, 0xcd83, 0x508c, 0x37ce, 0xdcff, 0xdcff, 0xf9e6, 0xd29c, 0x93c5, 0x54e6, 0x74e6, 0x74e6, 0x74e6, 0x74e6, 0x34de, 0xafa4, 0xcd83, 0xea62, 0xc739, 0xec5a, 0x38c6, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xdfff, 0x9ef7, 0x5def, 0x75ad, 0xa731, 0xc739, 0xd29c, 0x9bff, 0x5bf7, 0x95b5, 0x2942, 0x2e94, 0x92c5, 0xb2cd, 0x92cd, 0x92c5, 0x92c5, 0x11b5, 0x895a, 0x2429, 0x2431, 0xe841, 0x76ad, 0xdfff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xdfff, 0x59c6, 0xab52, 0x0e8c, 0x75e6, 0x4e94, 0xa631, 0xe418, 0x0419, 0x0421, 0x0421, 0x0421, 0x0421, 0x0419, 0x0419, 0x0421, 0x8371, 0x02aa, 0x4862, 0xb6b5, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x79ce, 0x6952, 0x668a, 0x48a3, 0x6d73, 0xd39c, 0xb6b5, 0xb7b5, 0xb7b5, 0xb7b5, 0xb7b5, 0xb7b5, 0xb7b5, 0x55ad, 0x8a5a, 0x8379, 0x41d2, 0x03a2, 0x486a, 0x55ad, 0xdfff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xdfff, 0x7def, 0x96b5, 0x6862, 0xc289, 0xe481, 0x8e73, 0xdbde, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x5def, 0xef83, 0x057a, 0x21ca, 0x02ba, 0x4359, 0xf07b, 0xfbde, 0xbef7, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xbef7, 0xf39c, 0xa449, 0x63b3, 0x637a, 0xf07b, 0x7eef, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x7def, 0x9294, 0x4351, 0xe2a1, 0x6361, 0x0429, 0xaa62, 0x18c6, 0xbef7, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x9ef7, 0xf39c, 0xa449, 0x63b3, 0x637a, 0xcf7b, 0x1ce7, 0x9ef7, 0xdfff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x7def, 0xb294, 0x6451, 0x02b2, 0x02ba, 0x02aa, 0x4492, 0xa96a, 0x18c6, 0x9ef7, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x9ef7, 0xf39c, 0xa449, 0x83c3, 0x43b3, 0x4a83, 0x518c, 0x34a5, 0x3ce7, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xbef7, 0xf8bd, 0x4c7b, 0x0492, 0x21c2, 0xe1ea, 0x22d3, 0xc39a, 0xed8b, 0xb6b5, 0xbef7, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xdfff, 0x38ce, 0xef8b, 0xc369, 0x62d3, 0x42f4, 0x43ab, 0xe451, 0x8762, 0x13a5, 0x3ce7, 0xdfff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x79ce, 0x2c73, 0x048a, 0xc2b2, 0x62bb, 0x62bb, 0xa441, 0x6d6b, 0x9ef7, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x7def, 0x4d6b, 0xc559, 0x02aa, 0x82c2, 0x42d3, 0xa2c3, 0x43ab, 0xc48a, 0x074a, 0x14a5, 0xbad6, 0xbbd6, 0xbbd6, 0xbad6, 0xbad6, 0xbad6, 0xbbd6, 0xbbd6, 0x79ce, 0xd39c, 0x495a, 0x4339, 0x6439, 0x6439, 0xc739, 0x1084, 0x9ef7, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x7def, 0xab52, 0x0331, 0x4359, 0x6359, 0xc361, 0x0362, 0x0362, 0xc449, 0x0429, 0x494a, 0x0c5b, 0x0c63, 0x0c63, 0x0c63, 0x0c5b, 0x0c63, 0x0c63, 0x0c63, 0x0c63, 0xab52, 0x6629, 0xc418, 0xc418, 0xc418, 0x5184, 0x79ce, 0xdfff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xbef7, 0x14a5, 0x1084, 0x1084, 0x1084, 0x1084, 0x1084, 0x1084, 0x1084, 0x1084, 0x1084, 0x1084, 0x1084, 0x1084, 0x1084, 0x1084, 0x1084, 0x1084, 0x1084, 0x1084, 0x1084, 0x1084, 0x1084, 0x1084, 0x1084, 0xdbde, 0xdfff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xdfff, 0x9ef7, 0x7def, 0x7def, 0x7def, 0x7def, 0x7def, 0x7def, 0x7def, 0x7def, 0x7def, 0x7def, 0x7def, 0x7def, 0x7def, 0x7def, 0x7def, 0x7def, 0x7def, 0x7def, 0x7def, 0x7def, 0x7def, 0x7def, 0x7def, 0xdfff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff
};

#define PULANDOOO_HEIGHT 60
#define PULANDOOO_WIDTH 60

static const uint16_t pulandooo[]  = {
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xdfff, 0x59ce, 0x59ce, 0xdbde, 0x9ef7, 0x1ce7, 0x9ad6, 0xfbde, 0xbef7, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x5def, 0x2529, 0x0429, 0xaa5a, 0x75b5, 0x6d7b, 0xa641, 0x0c6b, 0x38c6, 0xbef7, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x3de7, 0x0421, 0x0341, 0xc669, 0x8a62, 0xe669, 0x4371, 0xe671, 0x6d7b, 0x9ad6, 0xdfff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x3de7, 0x0429, 0x2361, 0x8491, 0x4361, 0x8389, 0xc4b9, 0xa4a1, 0x4369, 0x1094, 0x79ce, 0xbef7, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x3def, 0x4529, 0x2351, 0x8489, 0xa4a1, 0xa4a9, 0xc4b9, 0xc4b9, 0xe4b9, 0xa559, 0xf083, 0x7def, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x5def, 0x6529, 0xe328, 0x4459, 0xa4a9, 0x64b1, 0x64b9, 0x84c1, 0x04ca, 0x2351, 0x6d6b, 0x5def, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xbef7, 0xf49c, 0xcb5a, 0x0852, 0x70cc, 0x90dc, 0xebca, 0x84c1, 0x04d2, 0x2351, 0x6d73, 0x5def, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xbef7, 0x14a5, 0x1084, 0x9194, 0x1aef, 0x5bff, 0x94e5, 0xcdd3, 0x2de4, 0x4b93, 0xad7b, 0x14a5, 0xbef7, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x1ce7, 0x694a, 0x7194, 0x1aef, 0x9cff, 0xbcff, 0x5bff, 0xf9f6, 0x19f7, 0x15de, 0x0e8c, 0x494a, 0x5def, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x34a5, 0x8a52, 0x16c6, 0x3aef, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0x3af7, 0x909c, 0xc739, 0x5de7, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xb294, 0xc739, 0xf9e6, 0xbcff, 0xbcff, 0x5bf7, 0x37ce, 0x78d6, 0x9bff, 0xbcff, 0x9cff, 0x12a5, 0xa739, 0x3ce7, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x3ce7, 0x1ce7, 0x1ce7, 0x1ce7, 0x7def, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x1ce7, 0x9294, 0x494a, 0xfae6, 0xbcff, 0xbcff, 0x98de, 0x0b63, 0xee83, 0x5bf7, 0xbcff, 0x38ff, 0xf0bc, 0x6662, 0x17c6, 0x9ad6, 0xfbde, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xdfff, 0xbef7, 0x294a, 0x2521, 0x2521, 0x4529, 0x518c, 0xdfff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xc739, 0xae7b, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0x98de, 0x0b63, 0xee83, 0x5bf7, 0xbcff, 0xeefd, 0x08fd, 0x07fd, 0xc451, 0x0321, 0x8631, 0xdfff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x18c6, 0x2d6b, 0xb19c, 0x54b5, 0x74b5, 0x74b5, 0x1084, 0xae73, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xdfff, 0xe839, 0xae7b, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0x5bf7, 0x78d6, 0xb8de, 0x9bff, 0x9cff, 0xeffd, 0x08fd, 0x07fd, 0x26cc, 0xa6b3, 0x86ab, 0xcf7b, 0xbbde, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x96b5, 0x8631, 0x16ce, 0x9bff, 0x9bff, 0x7bff, 0x7094, 0x494a, 0xdfff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x3ce7, 0x38c6, 0xcb5a, 0x7094, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0x1aff, 0x56f6, 0xecf4, 0x67f4, 0x66f4, 0x06cc, 0xe6c3, 0xc6bb, 0xab5a, 0x79d6, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x96b5, 0x8631, 0x16ce, 0x9bff, 0x9cff, 0x9bff, 0xd2a4, 0xcb5a, 0xdbde, 0x9ef7, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x76b5, 0x8631, 0x78d6, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xf5f5, 0xe8da, 0xe4d1, 0x24ca, 0x44ba, 0xa641, 0xa631, 0x8a52, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x96b5, 0x8631, 0xf6c5, 0x7bff, 0xbcff, 0x9cff, 0xb9de, 0x54b5, 0x8e73, 0x96b5, 0x9ef7, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x7def, 0x55ad, 0xa739, 0x98d6, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xd5ed, 0x68ca, 0x44c1, 0x4389, 0x2349, 0xf3a4, 0x75ad, 0xf7bd, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xb6b5, 0x8631, 0x73bd, 0x19f7, 0xbcff, 0xbcff, 0xbcff, 0x1aef, 0x508c, 0x1084, 0x75ad, 0xdfff, 0xffff, 0xffff, 0xffff, 0xffff, 0x14a5, 0xcf7b, 0x0f84, 0xf9e6, 0xbcff, 0xbcff, 0x9cff, 0xbcff, 0xbcff, 0xbcff, 0x9cff, 0x9cff, 0xd5ed, 0x48ca, 0x44c1, 0x0379, 0xc320, 0x3ce7, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x38c6, 0x0c63, 0x2e9c, 0xd4cd, 0x9cff, 0xbcff, 0xbcff, 0xbcff, 0x3aef, 0xd29c, 0xef83, 0xd7bd, 0xd7bd, 0xd7bd, 0xb6b5, 0xb6b5, 0xae73, 0x508c, 0x5bf7, 0xbcff, 0xbcff, 0xbcff, 0x9cff, 0x9cff, 0x9cff, 0xbcff, 0x9cff, 0x9cff, 0xd5ed, 0x48ca, 0x84c9, 0x6391, 0x2359, 0x95b5, 0x1ce7, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x7def, 0x79ce, 0xca62, 0x4f94, 0x9bff, 0xbcff, 0xbcff, 0xbcff, 0x9bff, 0xf9e6, 0x33ad, 0xaa52, 0x6a4a, 0x694a, 0x494a, 0x494a, 0x54b5, 0xd9e6, 0x9bff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0x9cff, 0x9cff, 0x9cff, 0x9cff, 0x9cff, 0xd5ed, 0x89ca, 0xa4c9, 0xc4c1, 0xe5b1, 0x2852, 0x35ad, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x494a, 0xae7b, 0x9bff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xd9e6, 0x33ad, 0x33ad, 0x33ad, 0x33ad, 0x33ad, 0xf9e6, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0x9cff, 0x9cff, 0x9cff, 0xf9f6, 0x94ed, 0x89d2, 0xc9d2, 0x6edc, 0x4531, 0xb294, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x494a, 0xae7b, 0x9bff, 0x9cff, 0xd5bd, 0x9194, 0x9cff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0x9cff, 0x9cff, 0xbcff, 0xbcff, 0xbcff, 0x53e5, 0x12e5, 0x55e6, 0x6531, 0x9294, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x9ef7, 0xdbde, 0xaa5a, 0x2f8c, 0x9bff, 0x9cff, 0x7094, 0x484a, 0x9cff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0x9cff, 0x7bff, 0x98d6, 0x1aef, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0x5bff, 0xd8f6, 0x96ee, 0xe741, 0x518c, 0xfbde, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x38c6, 0x0c63, 0xd0a4, 0x36d6, 0x9cff, 0x9cff, 0x508c, 0x0842, 0x9cff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0x1aef, 0x6952, 0xf2a4, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0x19f7, 0x96ee, 0x72c5, 0xad83, 0xeb5a, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xd7bd, 0x0842, 0x52bd, 0xd8ee, 0xbcff, 0x9bff, 0x508c, 0xc741, 0x35e6, 0xf8f6, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xf9e6, 0x4529, 0x7094, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0x19f7, 0x96ee, 0x76e6, 0x8c83, 0xc739, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xd7bd, 0x0842, 0x52bd, 0xd7ee, 0xbcff, 0x9bff, 0x53ad, 0x4c6b, 0x8ea4, 0xf4cd, 0x3af7, 0x9bff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0x7aff, 0x77de, 0x6631, 0xb19c, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0x19f7, 0x76ee, 0x76ee, 0xac83, 0xc739, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xf7bd, 0x2942, 0x93c5, 0xb7ee, 0xbcff, 0xbcff, 0x9cff, 0x78d6, 0xe741, 0x4e9c, 0xb7ee, 0x9bff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xd8ee, 0x51cd, 0xa639, 0xd29c, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0x19f7, 0x75e6, 0x76ee, 0x6c7b, 0xc739, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x8a52, 0x6c7b, 0x56e6, 0x9bff, 0xbcff, 0xb8de, 0x0842, 0x2e94, 0x35e6, 0x96ee, 0x3af7, 0xbcff, 0xbcff, 0xbcff, 0x9cff, 0x9cff, 0x9cff, 0xb2d5, 0xcc8b, 0xa639, 0x78d6, 0x7bf7, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xd8ee, 0x75e6, 0x55e6, 0x75e6, 0x6c7b, 0xc739, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x6a52, 0x2b73, 0x34e6, 0x7bff, 0xbcff, 0x3aef, 0x919c, 0x0e8c, 0xb0a4, 0x55e6, 0xb7ee, 0xf8ee, 0xd8ee, 0xd8ee, 0xd8ee, 0xd7ee, 0xd8ee, 0xcc8b, 0x2b6b, 0xae7b, 0x7bf7, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xd7ee, 0x55e6, 0x55e6, 0x8fa4, 0xee83, 0x9294, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x6a52, 0x2b6b, 0x35e6, 0x5af7, 0x9bff, 0xbcff, 0x1aef, 0x508c, 0x4c73, 0x93c5, 0x93cd, 0x93cd, 0x93cd, 0x92cd, 0x92cd, 0x72cd, 0x72c5, 0x484a, 0x0f84, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0x9cff, 0x9bff, 0xb7ee, 0x55e6, 0x55e6, 0x6531, 0x718c, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xeb5a, 0x4c73, 0xb3cd, 0x76e6, 0x19f7, 0xbcff, 0xbcff, 0x7bf7, 0x94b5, 0x484a, 0x0742, 0x0742, 0x0742, 0x0742, 0x0742, 0x284a, 0x284a, 0x37ce, 0x1aef, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0x9bff, 0x5af7, 0xd8ee, 0x76e6, 0x34de, 0xd4d5, 0x0842, 0xb294, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x75ad, 0x508c, 0x4b73, 0x55e6, 0xf8ee, 0xbcff, 0xbcff, 0xbcff, 0x78d6, 0x508c, 0x2f8c, 0x508c, 0x508c, 0x7094, 0x7094, 0x9194, 0xb19c, 0x7bf7, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0x5af7, 0xd7ee, 0x76e6, 0x55e6, 0x11b5, 0x4b73, 0xd29c, 0x79ce, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x59ce, 0x8e73, 0x11b5, 0xf4d5, 0x39f7, 0x5af7, 0x9bff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0x7bff, 0x3af7, 0x3af7, 0xd8ee, 0x75e6, 0x55e6, 0x31bd, 0xad7b, 0xeb5a, 0x5def, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xdfff, 0xbef7, 0x6d6b, 0x2f94, 0x72c5, 0x75e6, 0xf8ee, 0x7bff, 0x7bff, 0x9cff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0xbcff, 0x7bff, 0x7bff, 0x7bff, 0x7bff, 0x7bff, 0x19f7, 0x55e6, 0x55e6, 0x76e6, 0x35e6, 0xb3cd, 0x6c73, 0xcf7b, 0xbad6, 0xdfff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xf8bd, 0x508c, 0x2b73, 0xd3d5, 0x55e6, 0xb7ee, 0xf8ee, 0x7af7, 0xbcff, 0xbcff, 0xbcff, 0x9cff, 0x9bff, 0xbcff, 0xd8ee, 0xd8ee, 0xd8ee, 0xb7ee, 0xb7ee, 0x76e6, 0x34e6, 0x35e6, 0x55e6, 0x93cd, 0x8c7b, 0xb29c, 0x59ce, 0xbef7, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x59ce, 0x7194, 0xcd8b, 0x11bd, 0x35e6, 0x96ee, 0x3af7, 0xbcff, 0xbcff, 0xbcff, 0x39f7, 0xf8f6, 0xf8f6, 0x76ee, 0x76e6, 0x76e6, 0x35e6, 0x35e6, 0x92cd, 0xed8b, 0xed8b, 0xcd83, 0xee83, 0x508c, 0xdbde, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xdfff, 0x1ce7, 0x0f84, 0x4f94, 0xf0b4, 0x52bd, 0x97e6, 0x7bff, 0xbcff, 0xbcff, 0x73bd, 0x32bd, 0x55e6, 0x76ee, 0xb3cd, 0x11b5, 0x11b5, 0xf0b4, 0xed8b, 0xc739, 0xab5a, 0x4d6b, 0x518c, 0xbad6, 0xdfff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xdfff, 0x9ad6, 0xef83, 0xe741, 0xca62, 0x32b5, 0x19f7, 0x9cff, 0xbcff, 0x8d73, 0x6c73, 0x35de, 0x76ee, 0x4f9c, 0xa639, 0xe741, 0xe741, 0xa639, 0x0842, 0x14a5, 0xdbde, 0x1ce7, 0xbef7, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xdfff, 0xfbde, 0x18c6, 0x75b5, 0x8d7b, 0x0c9c, 0x0fbd, 0x8d7b, 0x34a5, 0x99d6, 0x7cf7, 0x895a, 0x6531, 0xc220, 0x649a, 0xa461, 0x494a, 0x38c6, 0x7def, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x1ce7, 0x13a5, 0x4a83, 0x0783, 0xcb8b, 0x6d73, 0x9ad6, 0xdfff, 0xffff, 0x4529, 0x0339, 0xc371, 0x23db, 0xe379, 0xeb5a, 0x9ef7, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xd7bd, 0x8862, 0xe6bb, 0x068b, 0x2c6b, 0x79ce, 0xdfff, 0xffff, 0xffff, 0x2529, 0xe379, 0x43eb, 0x43eb, 0xe379, 0xcb5a, 0xbef7, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xb7b5, 0x475a, 0xe6bb, 0x058b, 0x2c6b, 0xdbde, 0xffff, 0xffff, 0xffff, 0x2529, 0xe320, 0x6449, 0x63fb, 0x64eb, 0x04b3, 0xab5a, 0x59ce, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x7def, 0x55ad, 0x4b7b, 0xe59a, 0xe5d3, 0xc58a, 0xeb62, 0xbad6, 0xffff, 0xffff, 0xffff, 0x518c, 0xaa52, 0x2439, 0x43eb, 0xa4fb, 0x04b3, 0x694a, 0x38c6, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x3ce7, 0x6e73, 0xa359, 0x84d3, 0x05ec, 0xc59a, 0xca62, 0x18c6, 0xdfff, 0xffff, 0xffff, 0xffff, 0x9294, 0x2431, 0x44eb, 0x64e3, 0x05a3, 0xeb5a, 0x59ce, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x3ce7, 0xcf7b, 0x0421, 0x4341, 0xe4aa, 0xe4f3, 0x44c3, 0xa549, 0x18c6, 0xffff, 0xffff, 0xffff, 0xd39c, 0xa541, 0x24d3, 0x457a, 0x6d6b, 0xdfff, 0xdfff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x9ef7, 0xf7bd, 0x4d6b, 0x4431, 0xc361, 0x24bb, 0x24c3, 0x8449, 0xd7bd, 0xdfff, 0xffff, 0xffff, 0x79ce, 0x929c, 0x457a, 0x6c83, 0x18c6, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x38c6, 0xab5a, 0x4529, 0xe369, 0xc59a, 0xea6a, 0x59ce, 0xdfff, 0xffff, 0xffff, 0xffff, 0x7def, 0x8e73, 0x96b5, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xbef7, 0x79d6, 0x8e73, 0xa639, 0xeb62, 0x58ce, 0xbef7, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xbef7, 0xdfff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x9ef7, 0x18c6, 0x34a5, 0xd7bd, 0x7def, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x3ce7, 0xf7bd, 0xd7bd, 0xf7bd, 0xf7bd, 0xf7bd, 0xf7bd, 0xf7bd, 0xf7bd, 0xf7bd, 0xf7bd, 0xf7bd, 0xf7bd, 0xf7bd, 0xf7bd, 0x59ce, 0x5def, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xf7bd, 0x694a, 0x294a, 0x494a, 0x494a, 0x494a, 0x494a, 0x294a, 0x294a, 0x294a, 0x294a, 0x294a, 0x294a, 0x294a, 0x294a, 0x2d6b, 0x59ce, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x3ce7, 0xf7bd, 0xd7bd, 0xd7bd, 0xd7bd, 0xd7bd, 0xd7bd, 0xd7bd, 0xd7bd, 0xd7bd, 0xd7bd, 0xd7bd, 0xd7bd, 0xd7bd, 0xd7bd, 0x38c6, 0x5def, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff
};

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_SPI1_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */


  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_SPI1_Init();
  /* USER CODE BEGIN 2 */
     HAL_Init();
     ST7735_Init();
     Menu();

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 10;
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ST7735_DC_Pin|ST7735_RES_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : ST7735_CS_Pin */
  GPIO_InitStruct.Pin = ST7735_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(ST7735_CS_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : ST7735_DC_Pin ST7735_RES_Pin */
  GPIO_InitStruct.Pin = ST7735_DC_Pin|ST7735_RES_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pins : PA9 PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */

Menu(void) {
    char buffer[16];

    ST7735_FillScreen(ST7735_WHITE);
    ST7735_WriteString(19, 19,"JOGO DA", Font_16x26, BLACK, WHITE);
    ST7735_WriteString(20, 45,"MEMORIA", Font_16x26, BLACK, WHITE);
    HAL_Delay(1500);
    ST7735_FillScreen(ST7735_WHITE);
    ST7735_WriteString(45, 19, "34DS",  Font_16x26, MAGENTA, WHITE);
    ST7735_WriteString(45, 45, "2025",  Font_16x26, MAGENTA, WHITE);
    HAL_Delay(1000);
    ST7735_FillScreen(ST7735_WHITE);
    ST7735_WriteString(31, 14, "RECORDE",  Font_11x18, MAGENTA, WHITE);
    ST7735_WriteString(31, 32, "ATUAL:",  Font_11x18, MAGENTA, WHITE);
    sprintf(buffer, "%d", recordeTentativas);
    ST7735_WriteString(31, 50, buffer,  Font_11x18, BLACK, WHITE);
    HAL_Delay(1000);

    ST7735_FillScreen(ST7735_WHITE);
    ST7735_WriteString(3, 10, "MULTIPLAYER?", Font_11x18, BLACK, WHITE);
    ST7735_WriteString(3, 30, "SIM: BTN CIMA", Font_7x10, GREEN, WHITE);
    ST7735_WriteString(3, 45, "NAO: BTN BAIXO", Font_7x10, RED, WHITE);

    while (btnConfirma==1 || btnCimaBaixo==1 || btnDireita==1 || btnEsquerda==1) {
        if (btnConfirma == 0) {
            modoMultiplayer = 0;
            break;
        } else if (btnCimaBaixo== 0) {
            modoMultiplayer = 1;
            break;
        }
    }

    ST7735_FillScreen(ST7735_WHITE);
    ST7735_WriteString(3, 14, "PRESSIONE",  Font_11x18, MAGENTA, WHITE);
    ST7735_WriteString(3, 32, "QUALQUER BOTAO",  Font_11x18, MAGENTA, WHITE);
    ST7735_WriteString(3, 50, "PARA INICIAR",  Font_11x18, MAGENTA, WHITE);

    while (btnConfirma==1 || btnCimaBaixo==1 || btnDireita==1 || btnEsquerda==1) {
        if (btnConfirma==0 || btnCimaBaixo==0 || btnDireita==0 || btnEsquerda==0) {
            IniciarJogo();
        }
    }
}

IniciarJogo(void){

	tempoInicio = HAL_GetTick(); //inicialização de variáveis
	tentativas = 0;
	pares = 16;
	cartasReveladas = 0;
    indexCarta1 = -1;
	indexCarta2 = -1;
	acertosJogador1 = 0;
	acertosJogador2 = 0;
	jogadorAtual = 1;

	ST7735_FillScreen(ST7735_WHITE);
    ST7735_WriteString(3, 19, "Iniciando...",  Font_11x18, MAGENTA, WHITE);
    HAL_Delay(500);
    ST7735_WriteString(3, 40, "Embaralhando cartas...",  Font_7x10, BLACK, WHITE);
    HAL_Delay(800);
    ST7735_FillScreen(ST7735_WHITE);
    HAL_Delay(100);

    GerarParesAleatorios();
    AtualizarIndicadorJogador();

    while (1){
  	  NavegarCursor();
    }
}

GerarParesAleatorios(void) {

    Cartinha tempCartas[16];
    char letras[8] = {'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'};

    for (int i = 0; i < 16; i++) {
        tempCartas[i].simbolo = letras[i / 2];
        tempCartas[i].revelada = 0;

        //Associando cores à letras
        switch (tempCartas[i].simbolo) {
            case 'A': tempCartas[i].cor = ST7735_RED; break;
            case 'B': tempCartas[i].cor = ST7735_GREEN; break;
            case 'C': tempCartas[i].cor = ST7735_BLUE; break;
            case 'D': tempCartas[i].cor = ST7735_YELLOW; break;
            case 'E': tempCartas[i].cor = ST7735_CYAN; break;
            case 'F': tempCartas[i].cor = ST7735_MAGENTA; break;
            case 'G': tempCartas[i].cor = ST7735_ORANGE; break;
            case 'H': tempCartas[i].cor = ST7735_VIOLET; break;
        }
    }

    //Randomização dos pares
    srand(HAL_GetTick());
    for (int i = 15; i > 0; i--) {
        int j = rand() % (i + 1);
        Cartinha temp = tempCartas[i];
        tempCartas[i] = tempCartas[j];
        tempCartas[j] = temp;
    }

    //Copia do array temporário para o principal
    for (int i = 0; i < 16; i++) {
        cartas[i] = tempCartas[i];
    }

    //Desenha todas as cartinhas viradas, em preto
    for (int i = 0; i < LINHAS; i++) {
        for (int j = 0; j < COLUNAS; j++) {
            int index = i * COLUNAS + j;
            int posX = X + (j * (largura + espaco));
            int posY = Y + (i * (altura + espaco));
            ST7735_FillRectangle(posX, posY, largura, altura, ST7735_BLACK);
        }
    }
}

NavegarCursor(void) {
    static int posLinha = 0;
    static int posColuna = 0;
    static int estadoBotaoVerticalAnterior = 0;
    static uint32_t ultimoMovimento = 0;

    int posXAnterior = X + (posColuna * (largura + espaco));
    int posYAnterior = Y + (posLinha * (altura + espaco));
    int indexAnterior = posLinha * COLUNAS + posColuna;

    if (cartas[indexAnterior].revelada)
        ST7735_FillRectangle(posXAnterior, posYAnterior, largura, altura, cartas[indexAnterior].cor);
    else
        ST7735_FillRectangle(posXAnterior, posYAnterior, largura, altura, ST7735_BLACK);

    uint32_t tempoAtual = HAL_GetTick();

    if (tempoAtual - ultimoMovimento > MOVIMENTO_DELAY) {
        if (btnDireita && posColuna < COLUNAS) {
            posColuna++;
            ultimoMovimento = tempoAtual;
        }
        if (btnEsquerda && posColuna > 0) {
            posColuna--;
            ultimoMovimento = tempoAtual;
        }
        if (btnCimaBaixo && !estadoBotaoVerticalAnterior) {
            posLinha = (posLinha == 0) ? 1 : 0;
            ultimoMovimento = tempoAtual;
        }
        estadoBotaoVerticalAnterior = btnCimaBaixo;
    }

    int posXAtual = X + (posColuna * (largura + espaco));
    int posYAtual = Y + (posLinha * (altura + espaco));
    DesenharCirculo(posXAtual + (largura / 2), posYAtual + (altura / 2), 4, ST7735_WHITE);

    static int estadoBotaoConfirmaAnterior = 0;
    if (!btnConfirma && !estadoBotaoConfirmaAnterior) {
    	SelecaoDeCarta(posLinha, posColuna);
    }
    estadoBotaoConfirmaAnterior = btnConfirma;
}

DesenharCirculo(int x, int y, int raio, uint16_t cor) {
    for (int i = -raio; i <= raio; i++) {
        for (int j = -raio; j <= raio; j++) {
            if (i * i + j * j <= raio * raio) {
                ST7735_DrawPixel(x + i, y + j, cor);
            }
        }
    }
}

SelecaoDeCarta(int linha, int coluna) {
    int index = linha * COLUNAS + coluna;

    if (cartas[index].revelada || cartasReveladas == 2) return;

    cartas[index].revelada = 1;
    int posX = X + (coluna * (largura + espaco));
    int posY = Y + (linha * (altura + espaco));
    ST7735_FillRectangle(posX, posY, largura, altura, cartas[index].cor);

    if (cartasReveladas == 0) {
        indexCarta1 = index;
        cartasReveladas = 1;
    } else if (cartasReveladas == 1) {
        indexCarta2 = index;
        cartasReveladas = 2;

        HAL_Delay(1000);

        if (modoMultiplayer) {
            if (jogadorAtual == 1) tentativasP1++;
            else tentativasP2++;
        } else {
            tentativas++;
        }

        AtualizarTentativas();
        CompararPares();
    }
}

CompararPares(void) {
    if (cartas[indexCarta1].simbolo == cartas[indexCarta2].simbolo) {
        cartas[indexCarta1].revelada = 1;
        cartas[indexCarta2].revelada = 1;
        pares -= 2;

        if (modoMultiplayer) {
            if (jogadorAtual == 1) {
                acertosJogador1++;
            } else {
                acertosJogador2++;
            }
        }

        VerificarFimDeJogo();
    } else {
        cartas[indexCarta1].revelada = 0;
        cartas[indexCarta2].revelada = 0;

        int x1 = X + ((indexCarta1 % COLUNAS) * (largura + espaco));
        int y1 = Y + ((indexCarta1 / COLUNAS) * (altura + espaco));
        ST7735_FillRectangle(x1, y1, largura, altura, ST7735_BLACK);

        int x2 = X + ((indexCarta2 % COLUNAS) * (largura + espaco));
        int y2 = Y + ((indexCarta2 / COLUNAS) * (altura + espaco));
        ST7735_FillRectangle(x2, y2, largura, altura, ST7735_BLACK);

        if (modoMultiplayer) {
            jogadorAtual = (jogadorAtual == 1) ? 2 : 1;
            AtualizarIndicadorJogador();
        }
    }

    indexCarta1 = -1;
    indexCarta2 = -1;
    cartasReveladas = 0;
}

AtualizarTentativas(void) {
    char buffer[32];

    if (modoMultiplayer) {
        sprintf(buffer, "P1:%d  P2:%d", acertosJogador1, acertosJogador2);
        ST7735_WriteString(5, 70, buffer, Font_7x10, ST7735_BLACK, ST7735_WHITE);
    } else {
        sprintf(buffer, "Tentativas: %d", tentativas);
        ST7735_FillRectangle(0, 0, 128, 12, ST7735_WHITE);
        ST7735_WriteString(5, 2, buffer, Font_7x10, ST7735_BLACK, ST7735_WHITE);
    }
}

VerificarFimDeJogo(void) {
    if (pares == 0) {
        int tentativasAtuais = modoMultiplayer ? (tentativasP1 + tentativasP2) : tentativas;

        if (tentativasAtuais < recordeTentativas || recordeTentativas == 0) {
            recordeTentativas = tentativasAtuais;
        }

        ExibirFimDeJogo();
    }
}

Vitoria(void){
    ST7735_FillScreen(WHITE);
    char buffer[32];

    if (modoMultiplayer)
    {
        if (acertosJogador1 > acertosJogador2) {
            ST7735_WriteString(5, 5, "Jogador 1 venceu!", Font_7x10, BLACK, WHITE);
        } else if (acertosJogador2 > acertosJogador1) {
            ST7735_WriteString(5, 5, "Jogador 2 venceu!", Font_7x10, BLACK, WHITE);
        } else {
            ST7735_WriteString(10, 5, "Empate!", Font_7x10, ST7735_BLACK, WHITE);
        }
    }
    else {
        ST7735_WriteString(5, 5, "PARABENS! VOCE GANHOU!", Font_7x10, BLACK, WHITE);
    }

	for (int x = 0; x <= 100; x += 5) {
	   ST7735_DrawImage(x, 20, 60, 60, pulandooo);
	   ST7735_DrawImage(x, 20, 60, 60, galinhapulo);
	   ST7735_DrawImage(x, 20, 60, 60, galinhachao);
	}
}

ExibirFimDeJogo(void){

    ST7735_FillScreen(ST7735_WHITE);
	char buffer[32];

	if (modoMultiplayer) tentativasTotais = (tentativasP1 + tentativasP2);
    uint32_t tempoFim = HAL_GetTick();
    uint32_t tempoTotal = (tempoFim - tempoInicio) / 1000;
    uint32_t minutos = tempoTotal / 60;
    uint32_t segundos = tempoTotal % 60;

    Vitoria();
    ST7735_FillScreen(ST7735_WHITE);

    ST7735_WriteString(15, 15,"  JOGO ", Font_16x26, BLACK, WHITE);
    ST7735_WriteString(8, 40,"CONCLUIDO", Font_16x26, BLACK, WHITE);
    ST7735_FillScreen(ST7735_WHITE);

    sprintf(buffer, "Tempo: %02lu:%02lu", minutos, segundos);
    ST7735_WriteString(3, 32, buffer, Font_11x18, ST7735_BLACK, ST7735_WHITE);
    HAL_Delay(1500);
    ST7735_FillScreen(ST7735_WHITE);

    if (modoMultiplayer)
    {
    	sprintf(buffer, "TOTAL DE", tentativasTotais);
    	ST7735_WriteString(3, 14, buffer, Font_11x18, ST7735_BLACK, ST7735_WHITE);
    	sprintf(buffer, "TENTATIVAS: %d", tentativasTotais);
        ST7735_WriteString(3, 30, buffer, Font_11x18, BLACK, WHITE);
        HAL_Delay(2000);
        ST7735_FillScreen(ST7735_WHITE);

        sprintf(buffer, "Acertos J1: %d", acertosJogador1);
        ST7735_WriteString(3, 14, buffer, Font_11x18, BLACK, WHITE);
        sprintf(buffer, "Acertos J2: %d", acertosJogador2);
        ST7735_WriteString(3, 34, buffer, Font_11x18, BLACK, WHITE);
        HAL_Delay(2000);

    } else {
        sprintf(buffer, "Tentativas: %d", tentativas);
        ST7735_WriteString(3, 32, buffer, Font_11x18, BLACK, WHITE);
        HAL_Delay(2000);
    }

    ST7735_FillScreen(ST7735_WHITE);

    if (modoMultiplayer)
    {
        if (tentativasTotais < recordeTentativas || recordeTentativas == 0) {
        recordeTentativas = tentativasTotais;

        ST7735_WriteString(3, 14,"NOVO RECORDE:", Font_11x18, BLACK, WHITE);
        sprintf(buffer, "%d", recordeTentativas);
        ST7735_WriteString(3, 32, buffer, Font_11x18, MAGENTA, WHITE);
        HAL_Delay(2000);
        }
        else {
        sprintf(buffer, "Recorde: %d", recordeTentativas);
        ST7735_WriteString(3, 14, buffer, Font_11x18, BLACK, WHITE);
        HAL_Delay(2000);
        }
    }
    else {
    if (tentativas < recordeTentativas || recordeTentativas == 0) {
        recordeTentativas = tentativas;
        ST7735_WriteString(3, 32,"NOVO RECORDE:", Font_11x18, BLACK, WHITE);
        sprintf(buffer, "%d", recordeTentativas);
        ST7735_WriteString(3, 50, buffer, Font_11x18, MAGENTA, WHITE);
        HAL_Delay(2000);
    }
    else {
        sprintf(buffer, "Recorde: %d", recordeTentativas);
        ST7735_WriteString(3, 32, buffer, Font_11x18, BLACK, WHITE);
        HAL_Delay(2000);
      }
    }

    ST7735_FillScreen(ST7735_WHITE);

    if (modoMultiplayer) {
        if (acertosJogador1 > acertosJogador2) {
        ST7735_WriteString(3, 14, "PLAYER 1:", Font_11x18, MAGENTA, WHITE);
        ST7735_WriteString(3, 30, "MEMORIA GENIAL!", Font_11x18, BLACK, WHITE);
        HAL_Delay(2000);
        } else if (acertosJogador2 > acertosJogador1) {
        ST7735_WriteString(3, 14, "PLAYER 2:", Font_11x18, MAGENTA, WHITE);
        ST7735_WriteString(3, 30, "MEMORIA GENIAL!", Font_11x18, BLACK, WHITE);
        HAL_Delay(2000);
        } else {
        ST7735_WriteString(3, 14, "OPS!", Font_11x18, MAGENTA, WHITE);
        ST7735_WriteString(3, 30, "EMPATE!", Font_11x18, BLACK, WHITE);
        HAL_Delay(2000);
        }
        HAL_Delay(2000);
    }

    ST7735_FillScreen(ST7735_WHITE);
    ST7735_WriteString(3, 14, "POR: thai, sabs e yas", Font_7x10, MAGENTA, WHITE);
    ST7735_WriteString(3, 37, "Jogar de novo?", Font_7x10, BLACK, WHITE);
    ST7735_WriteString(3, 55, "Aperte um botao!", Font_7x10, BLACK, WHITE);

    while (btnConfirma == 1 || btnCimaBaixo == 1 || btnDireita == 1 || btnEsquerda == 1) {
        if (btnConfirma == 0 || btnCimaBaixo == 0 || btnDireita == 0 || btnEsquerda == 0) {
            Menu();
        }
    }
}

AtualizarIndicadorJogador(void) {
    if (modoMultiplayer) {
        char buffer[20];
        sprintf(buffer, "Jogador: %d", jogadorAtual);
        ST7735_FillRectangle(80, 0, 48, 12, ST7735_WHITE);
        ST7735_WriteString(5, 2, buffer, Font_7x10, ST7735_BLUE, ST7735_WHITE);
    }
}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/